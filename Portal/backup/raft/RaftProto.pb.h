// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaftProto.proto

#ifndef PROTOBUF_INCLUDED_RaftProto_2eproto
#define PROTOBUF_INCLUDED_RaftProto_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_RaftProto_2eproto 

namespace protobuf_RaftProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[15];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_RaftProto_2eproto
class AddServerResult;
class AddServerResultDefaultTypeInternal;
extern AddServerResultDefaultTypeInternal _AddServerResult_default_instance_;
class AddServerRpc;
class AddServerRpcDefaultTypeInternal;
extern AddServerRpcDefaultTypeInternal _AddServerRpc_default_instance_;
class AppendEntriesResult;
class AppendEntriesResultDefaultTypeInternal;
extern AppendEntriesResultDefaultTypeInternal _AppendEntriesResult_default_instance_;
class AppendEntriesRpc;
class AppendEntriesRpcDefaultTypeInternal;
extern AppendEntriesRpcDefaultTypeInternal _AppendEntriesRpc_default_instance_;
class AppendEntriesRpc_Entry;
class AppendEntriesRpc_EntryDefaultTypeInternal;
extern AppendEntriesRpc_EntryDefaultTypeInternal _AppendEntriesRpc_Entry_default_instance_;
class InstallSnapshotResult;
class InstallSnapshotResultDefaultTypeInternal;
extern InstallSnapshotResultDefaultTypeInternal _InstallSnapshotResult_default_instance_;
class InstallSnapshotRpc;
class InstallSnapshotRpcDefaultTypeInternal;
extern InstallSnapshotRpcDefaultTypeInternal _InstallSnapshotRpc_default_instance_;
class NodeEndpoint;
class NodeEndpointDefaultTypeInternal;
extern NodeEndpointDefaultTypeInternal _NodeEndpoint_default_instance_;
class PreVoteResult;
class PreVoteResultDefaultTypeInternal;
extern PreVoteResultDefaultTypeInternal _PreVoteResult_default_instance_;
class PreVoteRpc;
class PreVoteRpcDefaultTypeInternal;
extern PreVoteRpcDefaultTypeInternal _PreVoteRpc_default_instance_;
class RemoveServerResult;
class RemoveServerResultDefaultTypeInternal;
extern RemoveServerResultDefaultTypeInternal _RemoveServerResult_default_instance_;
class RemoveServerRpc;
class RemoveServerRpcDefaultTypeInternal;
extern RemoveServerRpcDefaultTypeInternal _RemoveServerRpc_default_instance_;
class RequestVoteResult;
class RequestVoteResultDefaultTypeInternal;
extern RequestVoteResultDefaultTypeInternal _RequestVoteResult_default_instance_;
class RequestVoteRpc;
class RequestVoteRpcDefaultTypeInternal;
extern RequestVoteRpcDefaultTypeInternal _RequestVoteRpc_default_instance_;
class SnapshotHeader;
class SnapshotHeaderDefaultTypeInternal;
extern SnapshotHeaderDefaultTypeInternal _SnapshotHeader_default_instance_;
namespace google {
namespace protobuf {
template<> ::AddServerResult* Arena::CreateMaybeMessage<::AddServerResult>(Arena*);
template<> ::AddServerRpc* Arena::CreateMaybeMessage<::AddServerRpc>(Arena*);
template<> ::AppendEntriesResult* Arena::CreateMaybeMessage<::AppendEntriesResult>(Arena*);
template<> ::AppendEntriesRpc* Arena::CreateMaybeMessage<::AppendEntriesRpc>(Arena*);
template<> ::AppendEntriesRpc_Entry* Arena::CreateMaybeMessage<::AppendEntriesRpc_Entry>(Arena*);
template<> ::InstallSnapshotResult* Arena::CreateMaybeMessage<::InstallSnapshotResult>(Arena*);
template<> ::InstallSnapshotRpc* Arena::CreateMaybeMessage<::InstallSnapshotRpc>(Arena*);
template<> ::NodeEndpoint* Arena::CreateMaybeMessage<::NodeEndpoint>(Arena*);
template<> ::PreVoteResult* Arena::CreateMaybeMessage<::PreVoteResult>(Arena*);
template<> ::PreVoteRpc* Arena::CreateMaybeMessage<::PreVoteRpc>(Arena*);
template<> ::RemoveServerResult* Arena::CreateMaybeMessage<::RemoveServerResult>(Arena*);
template<> ::RemoveServerRpc* Arena::CreateMaybeMessage<::RemoveServerRpc>(Arena*);
template<> ::RequestVoteResult* Arena::CreateMaybeMessage<::RequestVoteResult>(Arena*);
template<> ::RequestVoteRpc* Arena::CreateMaybeMessage<::RequestVoteRpc>(Arena*);
template<> ::SnapshotHeader* Arena::CreateMaybeMessage<::SnapshotHeader>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class NodeEndpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NodeEndpoint) */ {
 public:
  NodeEndpoint();
  virtual ~NodeEndpoint();

  NodeEndpoint(const NodeEndpoint& from);

  inline NodeEndpoint& operator=(const NodeEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeEndpoint(NodeEndpoint&& from) noexcept
    : NodeEndpoint() {
    *this = ::std::move(from);
  }

  inline NodeEndpoint& operator=(NodeEndpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeEndpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeEndpoint* internal_default_instance() {
    return reinterpret_cast<const NodeEndpoint*>(
               &_NodeEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NodeEndpoint* other);
  friend void swap(NodeEndpoint& a, NodeEndpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeEndpoint* New() const final {
    return CreateMaybeMessage<NodeEndpoint>(NULL);
  }

  NodeEndpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeEndpoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeEndpoint& from);
  void MergeFrom(const NodeEndpoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeEndpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string host = 2;
  void clear_host();
  static const int kHostFieldNumber = 2;
  const ::std::string& host() const;
  void set_host(const ::std::string& value);
  #if LANG_CXX11
  void set_host(::std::string&& value);
  #endif
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  ::std::string* mutable_host();
  ::std::string* release_host();
  void set_allocated_host(::std::string* host);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeEndpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr host_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PreVoteRpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PreVoteRpc) */ {
 public:
  PreVoteRpc();
  virtual ~PreVoteRpc();

  PreVoteRpc(const PreVoteRpc& from);

  inline PreVoteRpc& operator=(const PreVoteRpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreVoteRpc(PreVoteRpc&& from) noexcept
    : PreVoteRpc() {
    *this = ::std::move(from);
  }

  inline PreVoteRpc& operator=(PreVoteRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreVoteRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreVoteRpc* internal_default_instance() {
    return reinterpret_cast<const PreVoteRpc*>(
               &_PreVoteRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PreVoteRpc* other);
  friend void swap(PreVoteRpc& a, PreVoteRpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreVoteRpc* New() const final {
    return CreateMaybeMessage<PreVoteRpc>(NULL);
  }

  PreVoteRpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PreVoteRpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PreVoteRpc& from);
  void MergeFrom(const PreVoteRpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreVoteRpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // int32 last_log_index = 2;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 2;
  ::google::protobuf::int32 last_log_index() const;
  void set_last_log_index(::google::protobuf::int32 value);

  // int32 last_log_term = 4;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::int32 last_log_term() const;
  void set_last_log_term(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PreVoteRpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 last_log_index_;
  ::google::protobuf::int32 last_log_term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PreVoteResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PreVoteResult) */ {
 public:
  PreVoteResult();
  virtual ~PreVoteResult();

  PreVoteResult(const PreVoteResult& from);

  inline PreVoteResult& operator=(const PreVoteResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PreVoteResult(PreVoteResult&& from) noexcept
    : PreVoteResult() {
    *this = ::std::move(from);
  }

  inline PreVoteResult& operator=(PreVoteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PreVoteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PreVoteResult* internal_default_instance() {
    return reinterpret_cast<const PreVoteResult*>(
               &_PreVoteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PreVoteResult* other);
  friend void swap(PreVoteResult& a, PreVoteResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PreVoteResult* New() const final {
    return CreateMaybeMessage<PreVoteResult>(NULL);
  }

  PreVoteResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PreVoteResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PreVoteResult& from);
  void MergeFrom(const PreVoteResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PreVoteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // bool vote_granted = 2;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:PreVoteResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 term_;
  bool vote_granted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestVoteRpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestVoteRpc) */ {
 public:
  RequestVoteRpc();
  virtual ~RequestVoteRpc();

  RequestVoteRpc(const RequestVoteRpc& from);

  inline RequestVoteRpc& operator=(const RequestVoteRpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteRpc(RequestVoteRpc&& from) noexcept
    : RequestVoteRpc() {
    *this = ::std::move(from);
  }

  inline RequestVoteRpc& operator=(RequestVoteRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteRpc* internal_default_instance() {
    return reinterpret_cast<const RequestVoteRpc*>(
               &_RequestVoteRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RequestVoteRpc* other);
  friend void swap(RequestVoteRpc& a, RequestVoteRpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteRpc* New() const final {
    return CreateMaybeMessage<RequestVoteRpc>(NULL);
  }

  RequestVoteRpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteRpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestVoteRpc& from);
  void MergeFrom(const RequestVoteRpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteRpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string candidate_id = 2;
  void clear_candidate_id();
  static const int kCandidateIdFieldNumber = 2;
  const ::std::string& candidate_id() const;
  void set_candidate_id(const ::std::string& value);
  #if LANG_CXX11
  void set_candidate_id(::std::string&& value);
  #endif
  void set_candidate_id(const char* value);
  void set_candidate_id(const char* value, size_t size);
  ::std::string* mutable_candidate_id();
  ::std::string* release_candidate_id();
  void set_allocated_candidate_id(::std::string* candidate_id);

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // int32 last_log_index = 3;
  void clear_last_log_index();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::int32 last_log_index() const;
  void set_last_log_index(::google::protobuf::int32 value);

  // int32 last_log_term = 4;
  void clear_last_log_term();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::int32 last_log_term() const;
  void set_last_log_term(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RequestVoteRpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr candidate_id_;
  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 last_log_index_;
  ::google::protobuf::int32 last_log_term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestVoteResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RequestVoteResult) */ {
 public:
  RequestVoteResult();
  virtual ~RequestVoteResult();

  RequestVoteResult(const RequestVoteResult& from);

  inline RequestVoteResult& operator=(const RequestVoteResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteResult(RequestVoteResult&& from) noexcept
    : RequestVoteResult() {
    *this = ::std::move(from);
  }

  inline RequestVoteResult& operator=(RequestVoteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteResult* internal_default_instance() {
    return reinterpret_cast<const RequestVoteResult*>(
               &_RequestVoteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RequestVoteResult* other);
  friend void swap(RequestVoteResult& a, RequestVoteResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteResult* New() const final {
    return CreateMaybeMessage<RequestVoteResult>(NULL);
  }

  RequestVoteResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestVoteResult& from);
  void MergeFrom(const RequestVoteResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // bool vote_granted = 2;
  void clear_vote_granted();
  static const int kVoteGrantedFieldNumber = 2;
  bool vote_granted() const;
  void set_vote_granted(bool value);

  // @@protoc_insertion_point(class_scope:RequestVoteResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 term_;
  bool vote_granted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppendEntriesRpc_Entry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AppendEntriesRpc.Entry) */ {
 public:
  AppendEntriesRpc_Entry();
  virtual ~AppendEntriesRpc_Entry();

  AppendEntriesRpc_Entry(const AppendEntriesRpc_Entry& from);

  inline AppendEntriesRpc_Entry& operator=(const AppendEntriesRpc_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesRpc_Entry(AppendEntriesRpc_Entry&& from) noexcept
    : AppendEntriesRpc_Entry() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRpc_Entry& operator=(AppendEntriesRpc_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRpc_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRpc_Entry* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRpc_Entry*>(
               &_AppendEntriesRpc_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(AppendEntriesRpc_Entry* other);
  friend void swap(AppendEntriesRpc_Entry& a, AppendEntriesRpc_Entry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRpc_Entry* New() const final {
    return CreateMaybeMessage<AppendEntriesRpc_Entry>(NULL);
  }

  AppendEntriesRpc_Entry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRpc_Entry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppendEntriesRpc_Entry& from);
  void MergeFrom(const AppendEntriesRpc_Entry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRpc_Entry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes command = 4;
  void clear_command();
  static const int kCommandFieldNumber = 4;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const void* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // int32 kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  ::google::protobuf::int32 kind() const;
  void set_kind(::google::protobuf::int32 value);

  // int32 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::int32 index() const;
  void set_index(::google::protobuf::int32 value);

  // int32 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AppendEntriesRpc.Entry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::int32 kind_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppendEntriesRpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AppendEntriesRpc) */ {
 public:
  AppendEntriesRpc();
  virtual ~AppendEntriesRpc();

  AppendEntriesRpc(const AppendEntriesRpc& from);

  inline AppendEntriesRpc& operator=(const AppendEntriesRpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesRpc(AppendEntriesRpc&& from) noexcept
    : AppendEntriesRpc() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRpc& operator=(AppendEntriesRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRpc* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRpc*>(
               &_AppendEntriesRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(AppendEntriesRpc* other);
  friend void swap(AppendEntriesRpc& a, AppendEntriesRpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRpc* New() const final {
    return CreateMaybeMessage<AppendEntriesRpc>(NULL);
  }

  AppendEntriesRpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesRpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppendEntriesRpc& from);
  void MergeFrom(const AppendEntriesRpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesRpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AppendEntriesRpc_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .AppendEntriesRpc.Entry entries = 7;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 7;
  ::AppendEntriesRpc_Entry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::AppendEntriesRpc_Entry >*
      mutable_entries();
  const ::AppendEntriesRpc_Entry& entries(int index) const;
  ::AppendEntriesRpc_Entry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::AppendEntriesRpc_Entry >&
      entries() const;

  // string message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // string leader_id = 3;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 3;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_id(::std::string&& value);
  #endif
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // int32 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // int32 prev_log_index = 4;
  void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 4;
  ::google::protobuf::int32 prev_log_index() const;
  void set_prev_log_index(::google::protobuf::int32 value);

  // int32 prev_log_term = 5;
  void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 5;
  ::google::protobuf::int32 prev_log_term() const;
  void set_prev_log_term(::google::protobuf::int32 value);

  // int32 leader_commit = 6;
  void clear_leader_commit();
  static const int kLeaderCommitFieldNumber = 6;
  ::google::protobuf::int32 leader_commit() const;
  void set_leader_commit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AppendEntriesRpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::AppendEntriesRpc_Entry > entries_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 prev_log_index_;
  ::google::protobuf::int32 prev_log_term_;
  ::google::protobuf::int32 leader_commit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppendEntriesResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AppendEntriesResult) */ {
 public:
  AppendEntriesResult();
  virtual ~AppendEntriesResult();

  AppendEntriesResult(const AppendEntriesResult& from);

  inline AppendEntriesResult& operator=(const AppendEntriesResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesResult(AppendEntriesResult&& from) noexcept
    : AppendEntriesResult() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResult& operator=(AppendEntriesResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResult* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResult*>(
               &_AppendEntriesResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(AppendEntriesResult* other);
  friend void swap(AppendEntriesResult& a, AppendEntriesResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResult* New() const final {
    return CreateMaybeMessage<AppendEntriesResult>(NULL);
  }

  AppendEntriesResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppendEntriesResult& from);
  void MergeFrom(const AppendEntriesResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rpc_message_id = 1;
  void clear_rpc_message_id();
  static const int kRpcMessageIdFieldNumber = 1;
  const ::std::string& rpc_message_id() const;
  void set_rpc_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_rpc_message_id(::std::string&& value);
  #endif
  void set_rpc_message_id(const char* value);
  void set_rpc_message_id(const char* value, size_t size);
  ::std::string* mutable_rpc_message_id();
  ::std::string* release_rpc_message_id();
  void set_allocated_rpc_message_id(::std::string* rpc_message_id);

  // int32 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // bool success = 3;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:AppendEntriesResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rpc_message_id_;
  ::google::protobuf::int32 term_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InstallSnapshotRpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InstallSnapshotRpc) */ {
 public:
  InstallSnapshotRpc();
  virtual ~InstallSnapshotRpc();

  InstallSnapshotRpc(const InstallSnapshotRpc& from);

  inline InstallSnapshotRpc& operator=(const InstallSnapshotRpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstallSnapshotRpc(InstallSnapshotRpc&& from) noexcept
    : InstallSnapshotRpc() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotRpc& operator=(InstallSnapshotRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotRpc* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotRpc*>(
               &_InstallSnapshotRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(InstallSnapshotRpc* other);
  friend void swap(InstallSnapshotRpc& a, InstallSnapshotRpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotRpc* New() const final {
    return CreateMaybeMessage<InstallSnapshotRpc>(NULL);
  }

  InstallSnapshotRpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotRpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstallSnapshotRpc& from);
  void MergeFrom(const InstallSnapshotRpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotRpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NodeEndpoint last_config = 5;
  int last_config_size() const;
  void clear_last_config();
  static const int kLastConfigFieldNumber = 5;
  ::NodeEndpoint* mutable_last_config(int index);
  ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >*
      mutable_last_config();
  const ::NodeEndpoint& last_config(int index) const;
  ::NodeEndpoint* add_last_config();
  const ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >&
      last_config() const;

  // string leader_id = 2;
  void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leader_id() const;
  void set_leader_id(const ::std::string& value);
  #if LANG_CXX11
  void set_leader_id(::std::string&& value);
  #endif
  void set_leader_id(const char* value);
  void set_leader_id(const char* value, size_t size);
  ::std::string* mutable_leader_id();
  ::std::string* release_leader_id();
  void set_allocated_leader_id(::std::string* leader_id);

  // bytes data = 7;
  void clear_data();
  static const int kDataFieldNumber = 7;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // int32 last_index = 3;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 3;
  ::google::protobuf::int32 last_index() const;
  void set_last_index(::google::protobuf::int32 value);

  // int32 last_term = 4;
  void clear_last_term();
  static const int kLastTermFieldNumber = 4;
  ::google::protobuf::int32 last_term() const;
  void set_last_term(::google::protobuf::int32 value);

  // int32 offset = 6;
  void clear_offset();
  static const int kOffsetFieldNumber = 6;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // bool done = 8;
  void clear_done();
  static const int kDoneFieldNumber = 8;
  bool done() const;
  void set_done(bool value);

  // @@protoc_insertion_point(class_scope:InstallSnapshotRpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NodeEndpoint > last_config_;
  ::google::protobuf::internal::ArenaStringPtr leader_id_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 last_index_;
  ::google::protobuf::int32 last_term_;
  ::google::protobuf::int32 offset_;
  bool done_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InstallSnapshotResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:InstallSnapshotResult) */ {
 public:
  InstallSnapshotResult();
  virtual ~InstallSnapshotResult();

  InstallSnapshotResult(const InstallSnapshotResult& from);

  inline InstallSnapshotResult& operator=(const InstallSnapshotResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InstallSnapshotResult(InstallSnapshotResult&& from) noexcept
    : InstallSnapshotResult() {
    *this = ::std::move(from);
  }

  inline InstallSnapshotResult& operator=(InstallSnapshotResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallSnapshotResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstallSnapshotResult* internal_default_instance() {
    return reinterpret_cast<const InstallSnapshotResult*>(
               &_InstallSnapshotResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(InstallSnapshotResult* other);
  friend void swap(InstallSnapshotResult& a, InstallSnapshotResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstallSnapshotResult* New() const final {
    return CreateMaybeMessage<InstallSnapshotResult>(NULL);
  }

  InstallSnapshotResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InstallSnapshotResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InstallSnapshotResult& from);
  void MergeFrom(const InstallSnapshotResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstallSnapshotResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::int32 term() const;
  void set_term(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:InstallSnapshotResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddServerRpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AddServerRpc) */ {
 public:
  AddServerRpc();
  virtual ~AddServerRpc();

  AddServerRpc(const AddServerRpc& from);

  inline AddServerRpc& operator=(const AddServerRpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddServerRpc(AddServerRpc&& from) noexcept
    : AddServerRpc() {
    *this = ::std::move(from);
  }

  inline AddServerRpc& operator=(AddServerRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddServerRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddServerRpc* internal_default_instance() {
    return reinterpret_cast<const AddServerRpc*>(
               &_AddServerRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(AddServerRpc* other);
  friend void swap(AddServerRpc& a, AddServerRpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddServerRpc* New() const final {
    return CreateMaybeMessage<AddServerRpc>(NULL);
  }

  AddServerRpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddServerRpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddServerRpc& from);
  void MergeFrom(const AddServerRpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServerRpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NodeEndpoint new_server = 1;
  bool has_new_server() const;
  void clear_new_server();
  static const int kNewServerFieldNumber = 1;
  private:
  const ::NodeEndpoint& _internal_new_server() const;
  public:
  const ::NodeEndpoint& new_server() const;
  ::NodeEndpoint* release_new_server();
  ::NodeEndpoint* mutable_new_server();
  void set_allocated_new_server(::NodeEndpoint* new_server);

  // @@protoc_insertion_point(class_scope:AddServerRpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NodeEndpoint* new_server_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddServerResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AddServerResult) */ {
 public:
  AddServerResult();
  virtual ~AddServerResult();

  AddServerResult(const AddServerResult& from);

  inline AddServerResult& operator=(const AddServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddServerResult(AddServerResult&& from) noexcept
    : AddServerResult() {
    *this = ::std::move(from);
  }

  inline AddServerResult& operator=(AddServerResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddServerResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddServerResult* internal_default_instance() {
    return reinterpret_cast<const AddServerResult*>(
               &_AddServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AddServerResult* other);
  friend void swap(AddServerResult& a, AddServerResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddServerResult* New() const final {
    return CreateMaybeMessage<AddServerResult>(NULL);
  }

  AddServerResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddServerResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddServerResult& from);
  void MergeFrom(const AddServerResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddServerResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // .NodeEndpoint leader_hint = 2;
  bool has_leader_hint() const;
  void clear_leader_hint();
  static const int kLeaderHintFieldNumber = 2;
  private:
  const ::NodeEndpoint& _internal_leader_hint() const;
  public:
  const ::NodeEndpoint& leader_hint() const;
  ::NodeEndpoint* release_leader_hint();
  ::NodeEndpoint* mutable_leader_hint();
  void set_allocated_leader_hint(::NodeEndpoint* leader_hint);

  // @@protoc_insertion_point(class_scope:AddServerResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::NodeEndpoint* leader_hint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveServerRpc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemoveServerRpc) */ {
 public:
  RemoveServerRpc();
  virtual ~RemoveServerRpc();

  RemoveServerRpc(const RemoveServerRpc& from);

  inline RemoveServerRpc& operator=(const RemoveServerRpc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveServerRpc(RemoveServerRpc&& from) noexcept
    : RemoveServerRpc() {
    *this = ::std::move(from);
  }

  inline RemoveServerRpc& operator=(RemoveServerRpc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveServerRpc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveServerRpc* internal_default_instance() {
    return reinterpret_cast<const RemoveServerRpc*>(
               &_RemoveServerRpc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RemoveServerRpc* other);
  friend void swap(RemoveServerRpc& a, RemoveServerRpc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveServerRpc* New() const final {
    return CreateMaybeMessage<RemoveServerRpc>(NULL);
  }

  RemoveServerRpc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveServerRpc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveServerRpc& from);
  void MergeFrom(const RemoveServerRpc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveServerRpc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .NodeEndpoint old_server = 1;
  bool has_old_server() const;
  void clear_old_server();
  static const int kOldServerFieldNumber = 1;
  private:
  const ::NodeEndpoint& _internal_old_server() const;
  public:
  const ::NodeEndpoint& old_server() const;
  ::NodeEndpoint* release_old_server();
  ::NodeEndpoint* mutable_old_server();
  void set_allocated_old_server(::NodeEndpoint* old_server);

  // @@protoc_insertion_point(class_scope:RemoveServerRpc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::NodeEndpoint* old_server_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveServerResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemoveServerResult) */ {
 public:
  RemoveServerResult();
  virtual ~RemoveServerResult();

  RemoveServerResult(const RemoveServerResult& from);

  inline RemoveServerResult& operator=(const RemoveServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveServerResult(RemoveServerResult&& from) noexcept
    : RemoveServerResult() {
    *this = ::std::move(from);
  }

  inline RemoveServerResult& operator=(RemoveServerResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveServerResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveServerResult* internal_default_instance() {
    return reinterpret_cast<const RemoveServerResult*>(
               &_RemoveServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(RemoveServerResult* other);
  friend void swap(RemoveServerResult& a, RemoveServerResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveServerResult* New() const final {
    return CreateMaybeMessage<RemoveServerResult>(NULL);
  }

  RemoveServerResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveServerResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveServerResult& from);
  void MergeFrom(const RemoveServerResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveServerResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // .NodeEndpoint leader_hint = 2;
  bool has_leader_hint() const;
  void clear_leader_hint();
  static const int kLeaderHintFieldNumber = 2;
  private:
  const ::NodeEndpoint& _internal_leader_hint() const;
  public:
  const ::NodeEndpoint& leader_hint() const;
  ::NodeEndpoint* release_leader_hint();
  ::NodeEndpoint* mutable_leader_hint();
  void set_allocated_leader_hint(::NodeEndpoint* leader_hint);

  // @@protoc_insertion_point(class_scope:RemoveServerResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::NodeEndpoint* leader_hint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SnapshotHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SnapshotHeader) */ {
 public:
  SnapshotHeader();
  virtual ~SnapshotHeader();

  SnapshotHeader(const SnapshotHeader& from);

  inline SnapshotHeader& operator=(const SnapshotHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SnapshotHeader(SnapshotHeader&& from) noexcept
    : SnapshotHeader() {
    *this = ::std::move(from);
  }

  inline SnapshotHeader& operator=(SnapshotHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SnapshotHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnapshotHeader* internal_default_instance() {
    return reinterpret_cast<const SnapshotHeader*>(
               &_SnapshotHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SnapshotHeader* other);
  friend void swap(SnapshotHeader& a, SnapshotHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SnapshotHeader* New() const final {
    return CreateMaybeMessage<SnapshotHeader>(NULL);
  }

  SnapshotHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SnapshotHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SnapshotHeader& from);
  void MergeFrom(const SnapshotHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SnapshotHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NodeEndpoint last_config = 3;
  int last_config_size() const;
  void clear_last_config();
  static const int kLastConfigFieldNumber = 3;
  ::NodeEndpoint* mutable_last_config(int index);
  ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >*
      mutable_last_config();
  const ::NodeEndpoint& last_config(int index) const;
  ::NodeEndpoint* add_last_config();
  const ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >&
      last_config() const;

  // int32 last_index = 1;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 1;
  ::google::protobuf::int32 last_index() const;
  void set_last_index(::google::protobuf::int32 value);

  // int32 last_term = 2;
  void clear_last_term();
  static const int kLastTermFieldNumber = 2;
  ::google::protobuf::int32 last_term() const;
  void set_last_term(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SnapshotHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::NodeEndpoint > last_config_;
  ::google::protobuf::int32 last_index_;
  ::google::protobuf::int32 last_term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_RaftProto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeEndpoint

// string id = 1;
inline void NodeEndpoint::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeEndpoint::id() const {
  // @@protoc_insertion_point(field_get:NodeEndpoint.id)
  return id_.GetNoArena();
}
inline void NodeEndpoint::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeEndpoint.id)
}
#if LANG_CXX11
inline void NodeEndpoint::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeEndpoint.id)
}
#endif
inline void NodeEndpoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeEndpoint.id)
}
inline void NodeEndpoint::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeEndpoint.id)
}
inline ::std::string* NodeEndpoint::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:NodeEndpoint.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeEndpoint::release_id() {
  // @@protoc_insertion_point(field_release:NodeEndpoint.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeEndpoint::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:NodeEndpoint.id)
}

// string host = 2;
inline void NodeEndpoint::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeEndpoint::host() const {
  // @@protoc_insertion_point(field_get:NodeEndpoint.host)
  return host_.GetNoArena();
}
inline void NodeEndpoint::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NodeEndpoint.host)
}
#if LANG_CXX11
inline void NodeEndpoint::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NodeEndpoint.host)
}
#endif
inline void NodeEndpoint::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NodeEndpoint.host)
}
inline void NodeEndpoint::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NodeEndpoint.host)
}
inline ::std::string* NodeEndpoint::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:NodeEndpoint.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeEndpoint::release_host() {
  // @@protoc_insertion_point(field_release:NodeEndpoint.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeEndpoint::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:NodeEndpoint.host)
}

// int32 port = 3;
inline void NodeEndpoint::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 NodeEndpoint::port() const {
  // @@protoc_insertion_point(field_get:NodeEndpoint.port)
  return port_;
}
inline void NodeEndpoint::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:NodeEndpoint.port)
}

// -------------------------------------------------------------------

// PreVoteRpc

// int32 term = 1;
inline void PreVoteRpc::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 PreVoteRpc::term() const {
  // @@protoc_insertion_point(field_get:PreVoteRpc.term)
  return term_;
}
inline void PreVoteRpc::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:PreVoteRpc.term)
}

// int32 last_log_index = 2;
inline void PreVoteRpc::clear_last_log_index() {
  last_log_index_ = 0;
}
inline ::google::protobuf::int32 PreVoteRpc::last_log_index() const {
  // @@protoc_insertion_point(field_get:PreVoteRpc.last_log_index)
  return last_log_index_;
}
inline void PreVoteRpc::set_last_log_index(::google::protobuf::int32 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:PreVoteRpc.last_log_index)
}

// int32 last_log_term = 4;
inline void PreVoteRpc::clear_last_log_term() {
  last_log_term_ = 0;
}
inline ::google::protobuf::int32 PreVoteRpc::last_log_term() const {
  // @@protoc_insertion_point(field_get:PreVoteRpc.last_log_term)
  return last_log_term_;
}
inline void PreVoteRpc::set_last_log_term(::google::protobuf::int32 value) {
  
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:PreVoteRpc.last_log_term)
}

// -------------------------------------------------------------------

// PreVoteResult

// int32 term = 1;
inline void PreVoteResult::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 PreVoteResult::term() const {
  // @@protoc_insertion_point(field_get:PreVoteResult.term)
  return term_;
}
inline void PreVoteResult::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:PreVoteResult.term)
}

// bool vote_granted = 2;
inline void PreVoteResult::clear_vote_granted() {
  vote_granted_ = false;
}
inline bool PreVoteResult::vote_granted() const {
  // @@protoc_insertion_point(field_get:PreVoteResult.vote_granted)
  return vote_granted_;
}
inline void PreVoteResult::set_vote_granted(bool value) {
  
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:PreVoteResult.vote_granted)
}

// -------------------------------------------------------------------

// RequestVoteRpc

// int32 term = 1;
inline void RequestVoteRpc::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 RequestVoteRpc::term() const {
  // @@protoc_insertion_point(field_get:RequestVoteRpc.term)
  return term_;
}
inline void RequestVoteRpc::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteRpc.term)
}

// string candidate_id = 2;
inline void RequestVoteRpc::clear_candidate_id() {
  candidate_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestVoteRpc::candidate_id() const {
  // @@protoc_insertion_point(field_get:RequestVoteRpc.candidate_id)
  return candidate_id_.GetNoArena();
}
inline void RequestVoteRpc::set_candidate_id(const ::std::string& value) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RequestVoteRpc.candidate_id)
}
#if LANG_CXX11
inline void RequestVoteRpc::set_candidate_id(::std::string&& value) {
  
  candidate_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestVoteRpc.candidate_id)
}
#endif
inline void RequestVoteRpc::set_candidate_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestVoteRpc.candidate_id)
}
inline void RequestVoteRpc::set_candidate_id(const char* value, size_t size) {
  
  candidate_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestVoteRpc.candidate_id)
}
inline ::std::string* RequestVoteRpc::mutable_candidate_id() {
  
  // @@protoc_insertion_point(field_mutable:RequestVoteRpc.candidate_id)
  return candidate_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestVoteRpc::release_candidate_id() {
  // @@protoc_insertion_point(field_release:RequestVoteRpc.candidate_id)
  
  return candidate_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteRpc::set_allocated_candidate_id(::std::string* candidate_id) {
  if (candidate_id != NULL) {
    
  } else {
    
  }
  candidate_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_id);
  // @@protoc_insertion_point(field_set_allocated:RequestVoteRpc.candidate_id)
}

// int32 last_log_index = 3;
inline void RequestVoteRpc::clear_last_log_index() {
  last_log_index_ = 0;
}
inline ::google::protobuf::int32 RequestVoteRpc::last_log_index() const {
  // @@protoc_insertion_point(field_get:RequestVoteRpc.last_log_index)
  return last_log_index_;
}
inline void RequestVoteRpc::set_last_log_index(::google::protobuf::int32 value) {
  
  last_log_index_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteRpc.last_log_index)
}

// int32 last_log_term = 4;
inline void RequestVoteRpc::clear_last_log_term() {
  last_log_term_ = 0;
}
inline ::google::protobuf::int32 RequestVoteRpc::last_log_term() const {
  // @@protoc_insertion_point(field_get:RequestVoteRpc.last_log_term)
  return last_log_term_;
}
inline void RequestVoteRpc::set_last_log_term(::google::protobuf::int32 value) {
  
  last_log_term_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteRpc.last_log_term)
}

// -------------------------------------------------------------------

// RequestVoteResult

// int32 term = 1;
inline void RequestVoteResult::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 RequestVoteResult::term() const {
  // @@protoc_insertion_point(field_get:RequestVoteResult.term)
  return term_;
}
inline void RequestVoteResult::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteResult.term)
}

// bool vote_granted = 2;
inline void RequestVoteResult::clear_vote_granted() {
  vote_granted_ = false;
}
inline bool RequestVoteResult::vote_granted() const {
  // @@protoc_insertion_point(field_get:RequestVoteResult.vote_granted)
  return vote_granted_;
}
inline void RequestVoteResult::set_vote_granted(bool value) {
  
  vote_granted_ = value;
  // @@protoc_insertion_point(field_set:RequestVoteResult.vote_granted)
}

// -------------------------------------------------------------------

// AppendEntriesRpc_Entry

// int32 kind = 1;
inline void AppendEntriesRpc_Entry::clear_kind() {
  kind_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesRpc_Entry::kind() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.Entry.kind)
  return kind_;
}
inline void AppendEntriesRpc_Entry::set_kind(::google::protobuf::int32 value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.Entry.kind)
}

// int32 index = 2;
inline void AppendEntriesRpc_Entry::clear_index() {
  index_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesRpc_Entry::index() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.Entry.index)
  return index_;
}
inline void AppendEntriesRpc_Entry::set_index(::google::protobuf::int32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.Entry.index)
}

// int32 term = 3;
inline void AppendEntriesRpc_Entry::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesRpc_Entry::term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.Entry.term)
  return term_;
}
inline void AppendEntriesRpc_Entry::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.Entry.term)
}

// bytes command = 4;
inline void AppendEntriesRpc_Entry::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppendEntriesRpc_Entry::command() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.Entry.command)
  return command_.GetNoArena();
}
inline void AppendEntriesRpc_Entry::set_command(const ::std::string& value) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.Entry.command)
}
#if LANG_CXX11
inline void AppendEntriesRpc_Entry::set_command(::std::string&& value) {
  
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendEntriesRpc.Entry.command)
}
#endif
inline void AppendEntriesRpc_Entry::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendEntriesRpc.Entry.command)
}
inline void AppendEntriesRpc_Entry::set_command(const void* value, size_t size) {
  
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendEntriesRpc.Entry.command)
}
inline ::std::string* AppendEntriesRpc_Entry::mutable_command() {
  
  // @@protoc_insertion_point(field_mutable:AppendEntriesRpc.Entry.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesRpc_Entry::release_command() {
  // @@protoc_insertion_point(field_release:AppendEntriesRpc.Entry.command)
  
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRpc_Entry::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    
  } else {
    
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:AppendEntriesRpc.Entry.command)
}

// -------------------------------------------------------------------

// AppendEntriesRpc

// string message_id = 1;
inline void AppendEntriesRpc::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppendEntriesRpc::message_id() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.message_id)
  return message_id_.GetNoArena();
}
inline void AppendEntriesRpc::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.message_id)
}
#if LANG_CXX11
inline void AppendEntriesRpc::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendEntriesRpc.message_id)
}
#endif
inline void AppendEntriesRpc::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendEntriesRpc.message_id)
}
inline void AppendEntriesRpc::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendEntriesRpc.message_id)
}
inline ::std::string* AppendEntriesRpc::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:AppendEntriesRpc.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesRpc::release_message_id() {
  // @@protoc_insertion_point(field_release:AppendEntriesRpc.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRpc::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:AppendEntriesRpc.message_id)
}

// int32 term = 2;
inline void AppendEntriesRpc::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesRpc::term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.term)
  return term_;
}
inline void AppendEntriesRpc::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.term)
}

// string leader_id = 3;
inline void AppendEntriesRpc::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppendEntriesRpc::leader_id() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.leader_id)
  return leader_id_.GetNoArena();
}
inline void AppendEntriesRpc::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.leader_id)
}
#if LANG_CXX11
inline void AppendEntriesRpc::set_leader_id(::std::string&& value) {
  
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendEntriesRpc.leader_id)
}
#endif
inline void AppendEntriesRpc::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendEntriesRpc.leader_id)
}
inline void AppendEntriesRpc::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendEntriesRpc.leader_id)
}
inline ::std::string* AppendEntriesRpc::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:AppendEntriesRpc.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesRpc::release_leader_id() {
  // @@protoc_insertion_point(field_release:AppendEntriesRpc.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesRpc::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:AppendEntriesRpc.leader_id)
}

// int32 prev_log_index = 4;
inline void AppendEntriesRpc::clear_prev_log_index() {
  prev_log_index_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesRpc::prev_log_index() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.prev_log_index)
  return prev_log_index_;
}
inline void AppendEntriesRpc::set_prev_log_index(::google::protobuf::int32 value) {
  
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.prev_log_index)
}

// int32 prev_log_term = 5;
inline void AppendEntriesRpc::clear_prev_log_term() {
  prev_log_term_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesRpc::prev_log_term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.prev_log_term)
  return prev_log_term_;
}
inline void AppendEntriesRpc::set_prev_log_term(::google::protobuf::int32 value) {
  
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.prev_log_term)
}

// int32 leader_commit = 6;
inline void AppendEntriesRpc::clear_leader_commit() {
  leader_commit_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesRpc::leader_commit() const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.leader_commit)
  return leader_commit_;
}
inline void AppendEntriesRpc::set_leader_commit(::google::protobuf::int32 value) {
  
  leader_commit_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesRpc.leader_commit)
}

// repeated .AppendEntriesRpc.Entry entries = 7;
inline int AppendEntriesRpc::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRpc::clear_entries() {
  entries_.Clear();
}
inline ::AppendEntriesRpc_Entry* AppendEntriesRpc::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:AppendEntriesRpc.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::AppendEntriesRpc_Entry >*
AppendEntriesRpc::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:AppendEntriesRpc.entries)
  return &entries_;
}
inline const ::AppendEntriesRpc_Entry& AppendEntriesRpc::entries(int index) const {
  // @@protoc_insertion_point(field_get:AppendEntriesRpc.entries)
  return entries_.Get(index);
}
inline ::AppendEntriesRpc_Entry* AppendEntriesRpc::add_entries() {
  // @@protoc_insertion_point(field_add:AppendEntriesRpc.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AppendEntriesRpc_Entry >&
AppendEntriesRpc::entries() const {
  // @@protoc_insertion_point(field_list:AppendEntriesRpc.entries)
  return entries_;
}

// -------------------------------------------------------------------

// AppendEntriesResult

// string rpc_message_id = 1;
inline void AppendEntriesResult::clear_rpc_message_id() {
  rpc_message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppendEntriesResult::rpc_message_id() const {
  // @@protoc_insertion_point(field_get:AppendEntriesResult.rpc_message_id)
  return rpc_message_id_.GetNoArena();
}
inline void AppendEntriesResult::set_rpc_message_id(const ::std::string& value) {
  
  rpc_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppendEntriesResult.rpc_message_id)
}
#if LANG_CXX11
inline void AppendEntriesResult::set_rpc_message_id(::std::string&& value) {
  
  rpc_message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppendEntriesResult.rpc_message_id)
}
#endif
inline void AppendEntriesResult::set_rpc_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rpc_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppendEntriesResult.rpc_message_id)
}
inline void AppendEntriesResult::set_rpc_message_id(const char* value, size_t size) {
  
  rpc_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppendEntriesResult.rpc_message_id)
}
inline ::std::string* AppendEntriesResult::mutable_rpc_message_id() {
  
  // @@protoc_insertion_point(field_mutable:AppendEntriesResult.rpc_message_id)
  return rpc_message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesResult::release_rpc_message_id() {
  // @@protoc_insertion_point(field_release:AppendEntriesResult.rpc_message_id)
  
  return rpc_message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesResult::set_allocated_rpc_message_id(::std::string* rpc_message_id) {
  if (rpc_message_id != NULL) {
    
  } else {
    
  }
  rpc_message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rpc_message_id);
  // @@protoc_insertion_point(field_set_allocated:AppendEntriesResult.rpc_message_id)
}

// int32 term = 2;
inline void AppendEntriesResult::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 AppendEntriesResult::term() const {
  // @@protoc_insertion_point(field_get:AppendEntriesResult.term)
  return term_;
}
inline void AppendEntriesResult::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesResult.term)
}

// bool success = 3;
inline void AppendEntriesResult::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResult::success() const {
  // @@protoc_insertion_point(field_get:AppendEntriesResult.success)
  return success_;
}
inline void AppendEntriesResult::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:AppendEntriesResult.success)
}

// -------------------------------------------------------------------

// InstallSnapshotRpc

// int32 term = 1;
inline void InstallSnapshotRpc::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 InstallSnapshotRpc::term() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.term)
  return term_;
}
inline void InstallSnapshotRpc::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:InstallSnapshotRpc.term)
}

// string leader_id = 2;
inline void InstallSnapshotRpc::clear_leader_id() {
  leader_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstallSnapshotRpc::leader_id() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.leader_id)
  return leader_id_.GetNoArena();
}
inline void InstallSnapshotRpc::set_leader_id(const ::std::string& value) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InstallSnapshotRpc.leader_id)
}
#if LANG_CXX11
inline void InstallSnapshotRpc::set_leader_id(::std::string&& value) {
  
  leader_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InstallSnapshotRpc.leader_id)
}
#endif
inline void InstallSnapshotRpc::set_leader_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InstallSnapshotRpc.leader_id)
}
inline void InstallSnapshotRpc::set_leader_id(const char* value, size_t size) {
  
  leader_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InstallSnapshotRpc.leader_id)
}
inline ::std::string* InstallSnapshotRpc::mutable_leader_id() {
  
  // @@protoc_insertion_point(field_mutable:InstallSnapshotRpc.leader_id)
  return leader_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstallSnapshotRpc::release_leader_id() {
  // @@protoc_insertion_point(field_release:InstallSnapshotRpc.leader_id)
  
  return leader_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRpc::set_allocated_leader_id(::std::string* leader_id) {
  if (leader_id != NULL) {
    
  } else {
    
  }
  leader_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_id);
  // @@protoc_insertion_point(field_set_allocated:InstallSnapshotRpc.leader_id)
}

// int32 last_index = 3;
inline void InstallSnapshotRpc::clear_last_index() {
  last_index_ = 0;
}
inline ::google::protobuf::int32 InstallSnapshotRpc::last_index() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.last_index)
  return last_index_;
}
inline void InstallSnapshotRpc::set_last_index(::google::protobuf::int32 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:InstallSnapshotRpc.last_index)
}

// int32 last_term = 4;
inline void InstallSnapshotRpc::clear_last_term() {
  last_term_ = 0;
}
inline ::google::protobuf::int32 InstallSnapshotRpc::last_term() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.last_term)
  return last_term_;
}
inline void InstallSnapshotRpc::set_last_term(::google::protobuf::int32 value) {
  
  last_term_ = value;
  // @@protoc_insertion_point(field_set:InstallSnapshotRpc.last_term)
}

// repeated .NodeEndpoint last_config = 5;
inline int InstallSnapshotRpc::last_config_size() const {
  return last_config_.size();
}
inline void InstallSnapshotRpc::clear_last_config() {
  last_config_.Clear();
}
inline ::NodeEndpoint* InstallSnapshotRpc::mutable_last_config(int index) {
  // @@protoc_insertion_point(field_mutable:InstallSnapshotRpc.last_config)
  return last_config_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >*
InstallSnapshotRpc::mutable_last_config() {
  // @@protoc_insertion_point(field_mutable_list:InstallSnapshotRpc.last_config)
  return &last_config_;
}
inline const ::NodeEndpoint& InstallSnapshotRpc::last_config(int index) const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.last_config)
  return last_config_.Get(index);
}
inline ::NodeEndpoint* InstallSnapshotRpc::add_last_config() {
  // @@protoc_insertion_point(field_add:InstallSnapshotRpc.last_config)
  return last_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >&
InstallSnapshotRpc::last_config() const {
  // @@protoc_insertion_point(field_list:InstallSnapshotRpc.last_config)
  return last_config_;
}

// int32 offset = 6;
inline void InstallSnapshotRpc::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 InstallSnapshotRpc::offset() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.offset)
  return offset_;
}
inline void InstallSnapshotRpc::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:InstallSnapshotRpc.offset)
}

// bytes data = 7;
inline void InstallSnapshotRpc::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& InstallSnapshotRpc::data() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.data)
  return data_.GetNoArena();
}
inline void InstallSnapshotRpc::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InstallSnapshotRpc.data)
}
#if LANG_CXX11
inline void InstallSnapshotRpc::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InstallSnapshotRpc.data)
}
#endif
inline void InstallSnapshotRpc::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InstallSnapshotRpc.data)
}
inline void InstallSnapshotRpc::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InstallSnapshotRpc.data)
}
inline ::std::string* InstallSnapshotRpc::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:InstallSnapshotRpc.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InstallSnapshotRpc::release_data() {
  // @@protoc_insertion_point(field_release:InstallSnapshotRpc.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InstallSnapshotRpc::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:InstallSnapshotRpc.data)
}

// bool done = 8;
inline void InstallSnapshotRpc::clear_done() {
  done_ = false;
}
inline bool InstallSnapshotRpc::done() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotRpc.done)
  return done_;
}
inline void InstallSnapshotRpc::set_done(bool value) {
  
  done_ = value;
  // @@protoc_insertion_point(field_set:InstallSnapshotRpc.done)
}

// -------------------------------------------------------------------

// InstallSnapshotResult

// int32 term = 1;
inline void InstallSnapshotResult::clear_term() {
  term_ = 0;
}
inline ::google::protobuf::int32 InstallSnapshotResult::term() const {
  // @@protoc_insertion_point(field_get:InstallSnapshotResult.term)
  return term_;
}
inline void InstallSnapshotResult::set_term(::google::protobuf::int32 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:InstallSnapshotResult.term)
}

// -------------------------------------------------------------------

// AddServerRpc

// .NodeEndpoint new_server = 1;
inline bool AddServerRpc::has_new_server() const {
  return this != internal_default_instance() && new_server_ != NULL;
}
inline void AddServerRpc::clear_new_server() {
  if (GetArenaNoVirtual() == NULL && new_server_ != NULL) {
    delete new_server_;
  }
  new_server_ = NULL;
}
inline const ::NodeEndpoint& AddServerRpc::_internal_new_server() const {
  return *new_server_;
}
inline const ::NodeEndpoint& AddServerRpc::new_server() const {
  const ::NodeEndpoint* p = new_server_;
  // @@protoc_insertion_point(field_get:AddServerRpc.new_server)
  return p != NULL ? *p : *reinterpret_cast<const ::NodeEndpoint*>(
      &::_NodeEndpoint_default_instance_);
}
inline ::NodeEndpoint* AddServerRpc::release_new_server() {
  // @@protoc_insertion_point(field_release:AddServerRpc.new_server)
  
  ::NodeEndpoint* temp = new_server_;
  new_server_ = NULL;
  return temp;
}
inline ::NodeEndpoint* AddServerRpc::mutable_new_server() {
  
  if (new_server_ == NULL) {
    auto* p = CreateMaybeMessage<::NodeEndpoint>(GetArenaNoVirtual());
    new_server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AddServerRpc.new_server)
  return new_server_;
}
inline void AddServerRpc::set_allocated_new_server(::NodeEndpoint* new_server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete new_server_;
  }
  if (new_server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      new_server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, new_server, submessage_arena);
    }
    
  } else {
    
  }
  new_server_ = new_server;
  // @@protoc_insertion_point(field_set_allocated:AddServerRpc.new_server)
}

// -------------------------------------------------------------------

// AddServerResult

// string status = 1;
inline void AddServerResult::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddServerResult::status() const {
  // @@protoc_insertion_point(field_get:AddServerResult.status)
  return status_.GetNoArena();
}
inline void AddServerResult::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddServerResult.status)
}
#if LANG_CXX11
inline void AddServerResult::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddServerResult.status)
}
#endif
inline void AddServerResult::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddServerResult.status)
}
inline void AddServerResult::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddServerResult.status)
}
inline ::std::string* AddServerResult::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:AddServerResult.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddServerResult::release_status() {
  // @@protoc_insertion_point(field_release:AddServerResult.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddServerResult::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:AddServerResult.status)
}

// .NodeEndpoint leader_hint = 2;
inline bool AddServerResult::has_leader_hint() const {
  return this != internal_default_instance() && leader_hint_ != NULL;
}
inline void AddServerResult::clear_leader_hint() {
  if (GetArenaNoVirtual() == NULL && leader_hint_ != NULL) {
    delete leader_hint_;
  }
  leader_hint_ = NULL;
}
inline const ::NodeEndpoint& AddServerResult::_internal_leader_hint() const {
  return *leader_hint_;
}
inline const ::NodeEndpoint& AddServerResult::leader_hint() const {
  const ::NodeEndpoint* p = leader_hint_;
  // @@protoc_insertion_point(field_get:AddServerResult.leader_hint)
  return p != NULL ? *p : *reinterpret_cast<const ::NodeEndpoint*>(
      &::_NodeEndpoint_default_instance_);
}
inline ::NodeEndpoint* AddServerResult::release_leader_hint() {
  // @@protoc_insertion_point(field_release:AddServerResult.leader_hint)
  
  ::NodeEndpoint* temp = leader_hint_;
  leader_hint_ = NULL;
  return temp;
}
inline ::NodeEndpoint* AddServerResult::mutable_leader_hint() {
  
  if (leader_hint_ == NULL) {
    auto* p = CreateMaybeMessage<::NodeEndpoint>(GetArenaNoVirtual());
    leader_hint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AddServerResult.leader_hint)
  return leader_hint_;
}
inline void AddServerResult::set_allocated_leader_hint(::NodeEndpoint* leader_hint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leader_hint_;
  }
  if (leader_hint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader_hint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader_hint, submessage_arena);
    }
    
  } else {
    
  }
  leader_hint_ = leader_hint;
  // @@protoc_insertion_point(field_set_allocated:AddServerResult.leader_hint)
}

// -------------------------------------------------------------------

// RemoveServerRpc

// .NodeEndpoint old_server = 1;
inline bool RemoveServerRpc::has_old_server() const {
  return this != internal_default_instance() && old_server_ != NULL;
}
inline void RemoveServerRpc::clear_old_server() {
  if (GetArenaNoVirtual() == NULL && old_server_ != NULL) {
    delete old_server_;
  }
  old_server_ = NULL;
}
inline const ::NodeEndpoint& RemoveServerRpc::_internal_old_server() const {
  return *old_server_;
}
inline const ::NodeEndpoint& RemoveServerRpc::old_server() const {
  const ::NodeEndpoint* p = old_server_;
  // @@protoc_insertion_point(field_get:RemoveServerRpc.old_server)
  return p != NULL ? *p : *reinterpret_cast<const ::NodeEndpoint*>(
      &::_NodeEndpoint_default_instance_);
}
inline ::NodeEndpoint* RemoveServerRpc::release_old_server() {
  // @@protoc_insertion_point(field_release:RemoveServerRpc.old_server)
  
  ::NodeEndpoint* temp = old_server_;
  old_server_ = NULL;
  return temp;
}
inline ::NodeEndpoint* RemoveServerRpc::mutable_old_server() {
  
  if (old_server_ == NULL) {
    auto* p = CreateMaybeMessage<::NodeEndpoint>(GetArenaNoVirtual());
    old_server_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RemoveServerRpc.old_server)
  return old_server_;
}
inline void RemoveServerRpc::set_allocated_old_server(::NodeEndpoint* old_server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete old_server_;
  }
  if (old_server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      old_server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, old_server, submessage_arena);
    }
    
  } else {
    
  }
  old_server_ = old_server;
  // @@protoc_insertion_point(field_set_allocated:RemoveServerRpc.old_server)
}

// -------------------------------------------------------------------

// RemoveServerResult

// string status = 1;
inline void RemoveServerResult::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemoveServerResult::status() const {
  // @@protoc_insertion_point(field_get:RemoveServerResult.status)
  return status_.GetNoArena();
}
inline void RemoveServerResult::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoveServerResult.status)
}
#if LANG_CXX11
inline void RemoveServerResult::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoveServerResult.status)
}
#endif
inline void RemoveServerResult::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoveServerResult.status)
}
inline void RemoveServerResult::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoveServerResult.status)
}
inline ::std::string* RemoveServerResult::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:RemoveServerResult.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveServerResult::release_status() {
  // @@protoc_insertion_point(field_release:RemoveServerResult.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveServerResult::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:RemoveServerResult.status)
}

// .NodeEndpoint leader_hint = 2;
inline bool RemoveServerResult::has_leader_hint() const {
  return this != internal_default_instance() && leader_hint_ != NULL;
}
inline void RemoveServerResult::clear_leader_hint() {
  if (GetArenaNoVirtual() == NULL && leader_hint_ != NULL) {
    delete leader_hint_;
  }
  leader_hint_ = NULL;
}
inline const ::NodeEndpoint& RemoveServerResult::_internal_leader_hint() const {
  return *leader_hint_;
}
inline const ::NodeEndpoint& RemoveServerResult::leader_hint() const {
  const ::NodeEndpoint* p = leader_hint_;
  // @@protoc_insertion_point(field_get:RemoveServerResult.leader_hint)
  return p != NULL ? *p : *reinterpret_cast<const ::NodeEndpoint*>(
      &::_NodeEndpoint_default_instance_);
}
inline ::NodeEndpoint* RemoveServerResult::release_leader_hint() {
  // @@protoc_insertion_point(field_release:RemoveServerResult.leader_hint)
  
  ::NodeEndpoint* temp = leader_hint_;
  leader_hint_ = NULL;
  return temp;
}
inline ::NodeEndpoint* RemoveServerResult::mutable_leader_hint() {
  
  if (leader_hint_ == NULL) {
    auto* p = CreateMaybeMessage<::NodeEndpoint>(GetArenaNoVirtual());
    leader_hint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RemoveServerResult.leader_hint)
  return leader_hint_;
}
inline void RemoveServerResult::set_allocated_leader_hint(::NodeEndpoint* leader_hint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leader_hint_;
  }
  if (leader_hint) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader_hint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader_hint, submessage_arena);
    }
    
  } else {
    
  }
  leader_hint_ = leader_hint;
  // @@protoc_insertion_point(field_set_allocated:RemoveServerResult.leader_hint)
}

// -------------------------------------------------------------------

// SnapshotHeader

// int32 last_index = 1;
inline void SnapshotHeader::clear_last_index() {
  last_index_ = 0;
}
inline ::google::protobuf::int32 SnapshotHeader::last_index() const {
  // @@protoc_insertion_point(field_get:SnapshotHeader.last_index)
  return last_index_;
}
inline void SnapshotHeader::set_last_index(::google::protobuf::int32 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:SnapshotHeader.last_index)
}

// int32 last_term = 2;
inline void SnapshotHeader::clear_last_term() {
  last_term_ = 0;
}
inline ::google::protobuf::int32 SnapshotHeader::last_term() const {
  // @@protoc_insertion_point(field_get:SnapshotHeader.last_term)
  return last_term_;
}
inline void SnapshotHeader::set_last_term(::google::protobuf::int32 value) {
  
  last_term_ = value;
  // @@protoc_insertion_point(field_set:SnapshotHeader.last_term)
}

// repeated .NodeEndpoint last_config = 3;
inline int SnapshotHeader::last_config_size() const {
  return last_config_.size();
}
inline void SnapshotHeader::clear_last_config() {
  last_config_.Clear();
}
inline ::NodeEndpoint* SnapshotHeader::mutable_last_config(int index) {
  // @@protoc_insertion_point(field_mutable:SnapshotHeader.last_config)
  return last_config_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >*
SnapshotHeader::mutable_last_config() {
  // @@protoc_insertion_point(field_mutable_list:SnapshotHeader.last_config)
  return &last_config_;
}
inline const ::NodeEndpoint& SnapshotHeader::last_config(int index) const {
  // @@protoc_insertion_point(field_get:SnapshotHeader.last_config)
  return last_config_.Get(index);
}
inline ::NodeEndpoint* SnapshotHeader::add_last_config() {
  // @@protoc_insertion_point(field_add:SnapshotHeader.last_config)
  return last_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeEndpoint >&
SnapshotHeader::last_config() const {
  // @@protoc_insertion_point(field_list:SnapshotHeader.last_config)
  return last_config_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_RaftProto_2eproto
